pipeline {
    agent any
    stages {
        stage('scm checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'token', url: 'https://github.com/vinuthapra/spring-boot-maven-demo.git']]])
            }
        }
        stage('Build') {
            steps {
                bat 'mvn compile'
                bat 'mvn clean'
                bat 'mvn clean package -DskipTests'
            }
        }
        stage('copy jars') {
            steps {
                bat 'mkdir Build_%BUILD_NUMBER%'
                bat 'copy target/demo-0.0.1-SNAPSHOT.jar Build_%BUILD_NUMBER%'
            }
        }
        stage('Commit Build ID') {
            stage('Commit') {
              steps {
        // Get the Build ID
        def buildId = env.BUILD_ID
        
        // Set the commit message with the Build ID
        def commitMessage = "Build ${buildId}"
        
        // Add the commit with the Build ID
        bat 'git add .'
        bat "git commit -m \"${commitMessage}\""
        bat 'git push'
      }
    }
            }
        }
    }

